---
import BaseLayout from '../layouts/BaseLayout.astro'
import CategoryCard from '../components/CategoryCard.jsx'
import CharacterCard from '../components/CharacterCard.vue'

export async function createCollection() {
  const response = await fetch(`https://pokeapi.co/api/v2/pokemon?limit=1200`)
  const jsonResponse = await response.json()
  const allPokemons = jsonResponse.results

  return {
    route: '/pokemons/:name',
    paths() {
      return allPokemons.map(pokemon => ({params: {name: pokemon.name}}))
    },
    async props({ params}) {
      const response = await fetch('https://graphqlpokemon.favware.tech/', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          query: `
            {
              pokemon: getPokemonDetailsByName(pokemon: ${params.name.replace(/-/g, '')}) {
                num
                name: species
                abilities { first second hidden }
                stats: baseStats { hp attack defense specialattack specialdefense speed }
                gender { male female }
                height
                weight
                color
              }
            }
          `
        }),
      }).then(res => res.json())

      let pokemon = {}

      if (response.data?.pokemon) {
        pokemon = {...response.data.pokemon}
        pokemon.color = pokemon.color.toLowerCase()
        pokemon.image = `https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/other/official-artwork/${pokemon.num}.png`
      } else {
        const pokemonREST = await fetch(`https://pokeapi.co/api/v2/pokemon/${params.name}`).then(res => res.json())
        pokemon = {
          name: pokemonREST.name,
          height: pokemonREST.height,
          weight: pokemonREST.weigh,
          image: `https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/other/official-artwork/${pokemonREST.id}.png`,
          stats: pokemonREST.stats.map(stat => [stat.stat.name, stat.base_stat]),
          abilities: pokemonREST.abilities.map(({ability}) => ability.name),
          color: '',
        }
      }

      return {
        pokemon,
      }
    }
  }
}

const { pokemon } = Astro.props
---
<BaseLayout
  title="{`${pokemon.name} - Astro Pokedex`}"
  description="{`PokÃ©mon ${pokemon.name} - Astro Pokedex`}"
  prevHref="{`/colors/${pokemon.color}`}"
>
  <CategoryCard
    class="m-auto"
    pill
    href={`/colors/${pokemon.color}`}
    title={pokemon.color}
    color={pokemon.color}
  />

  <CharacterCard pokemon={pokemon}
  />
</BaseLayout>
